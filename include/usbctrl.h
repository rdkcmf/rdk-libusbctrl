/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2016 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**
* @defgroup USB_MGM RDK Usb Device Control
* @{
* @defgroup common
* @{
**/

/* 
 * The following table is are published properties by this library  
 */
 typedef enum {
//Device Level                    //sysfs attr
RUSBCTRL_PROPNAME_MANUFACTURER = 0,   //"manufacturer"
RUSBCTRL_PROPNAME_PRODUCT,        // "product"
RUSBCTRL_PROPNAME_MODEL,          // "idProduct"
RUSBCTRL_PROPNAME_VENDOR,         // "idVendor"
RUSBCTRL_PROPNAME_SERIAL,         //"serial"
// Interface Level             
RUSBCTRL_PROPNAME_DEVTYPE,        //"bInterfaceClass"
RUSBCTRL_PROPNAME_DEVSUBTYPE,     // "bInterfaceSubClass"
} rusbCtrl_propname_t;


typedef enum {
	RUSBCTRL_SUCCESS = 0,
	RUSBCTRL_FAILURE = -1
} rusbCtrl_result_t;
/*
 * The callback will beinvoked when a device of monitored type is inserted or removed.
 *
 * devId is a unique Id generated by libusbctrl. devId should be a Id that can identify
 * a USB interface. A USB device can have multiple interfaces.
 * 
 * inserted indicates of the device is inserted or removed.
 *
 * The application can use the devId to query properties of the device. 
 * It is safe to do so from callback.
 */
typedef void (*rusbCtrl_devCallback_t)(int devId, int inserted, void *cbData);

/*
 * Initiate the library to a state that it is ready to detect device
 * events and invoke callbacks. 
 * 
 * Library can be initialized multple times. But init() and term()
 * must match.
 *
 * returns RUSBCTRL_SUCCESS on success anyother value on failure.
 *
 * This must be called first. Other APIs will error otherwise.
 */
int rusbCtrl_init(void);

/*
 * Release all resources allocated. 
 */
int rusbCtrl_term();

/*
 * Allow application to listen for USB insert/remove events.
 * returns RUSBCTRL_SUCCESS on success anyother value on failure.
 * 
 * An appliction can only register 1 callback. 
 * (This constraint may be lifted in the future if needed)
 * devList is a pointer to a an array containing list of connected devices.
 * This array is allocated on the heap and must be freed by the user.
 * devListNumEntries is the number of entries in the array.
 */
int rusbCtrl_registerCallback(rusbCtrl_devCallback_t cb, void *cbData, int **devList, int *devListNumEntries);

/*
 * Returns a property value. propertyName is a set of properties published
 * by libusbCtrl (the RUSBCTRL_PROPNAME_* macros)
 * THe user is responsible to free() the value returned. *
 * On failure NULL is returned.
 */
char *rusbCtrl_getProperty(int devId, const char *propertyName);


/** @} */
/** @} */
